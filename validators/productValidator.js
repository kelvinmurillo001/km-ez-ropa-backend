// üìÅ backend/validators/productValidator.js
import { body } from 'express-validator'

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üì∏ Validaciones comunes para im√°genes principales y variantes */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

// ‚úÖ Reglas para la imagen principal del producto
const imagenPrincipalRules = [
  body('images')
    .isArray({ min: 1, max: 1 }).withMessage('‚ö†Ô∏è Debes enviar exactamente una imagen en formato array.'),

  body('images.*.url')
    .notEmpty().withMessage('‚ö†Ô∏è La imagen necesita una URL v√°lida.').bail()
    .isURL().withMessage('‚ö†Ô∏è La URL de la imagen es inv√°lida.'),

  body('images.*.cloudinaryId')
    .notEmpty().withMessage('‚ö†Ô∏è cloudinaryId de imagen requerido.'),

  body('images.*.talla')
    .notEmpty().withMessage('‚ö†Ô∏è Talla de la imagen requerida.'),

  body('images.*.color')
    .notEmpty().withMessage('‚ö†Ô∏è Color de la imagen requerido.')
]

// ‚úÖ Reglas para variantes del producto
const variantesRules = [
  body('variants')
    .optional()
    .isArray({ max: 4 }).withMessage('‚ö†Ô∏è M√°ximo 4 variantes permitidas.'),

  body('variants.*.talla')
    .optional()
    .notEmpty().withMessage('‚ö†Ô∏è Cada variante necesita una talla.'),

  body('variants.*.color')
    .optional()
    .notEmpty().withMessage('‚ö†Ô∏è Cada variante necesita un color.'),

  body('variants.*.imageUrl')
    .optional()
    .notEmpty().withMessage('‚ö†Ô∏è La variante debe incluir una imagen.').bail()
    .isURL().withMessage('‚ö†Ô∏è La URL de la imagen de variante es inv√°lida.'),

  body('variants.*.cloudinaryId')
    .optional()
    .notEmpty().withMessage('‚ö†Ô∏è cloudinaryId requerido para la variante.'),

  body('variants.*.stock')
    .optional()
    .isInt({ min: 0 }).withMessage('‚ö†Ô∏è El stock de la variante debe ser un entero ‚â• 0.')
]

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üÜï Validaciones para CREAR Producto           */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export const createProductValidation = [
  body('name')
    .notEmpty().withMessage('‚ö†Ô∏è El nombre del producto es obligatorio.').bail()
    .isString().withMessage('‚ö†Ô∏è El nombre debe ser texto.').bail()
    .isLength({ min: 2 }).withMessage('‚ö†Ô∏è M√≠nimo 2 caracteres.'),

  body('price')
    .notEmpty().withMessage('‚ö†Ô∏è El precio es obligatorio.').bail()
    .isFloat({ gt: 0 }).withMessage('‚ö†Ô∏è Debe ser un n√∫mero mayor a 0.'),

  body('category')
    .notEmpty().withMessage('‚ö†Ô∏è La categor√≠a es obligatoria.'),

  body('subcategory')
    .notEmpty().withMessage('‚ö†Ô∏è La subcategor√≠a es obligatoria.'),

  body('tallaTipo')
    .notEmpty().withMessage('‚ö†Ô∏è El tipo de talla es obligatorio.'),

  body('createdBy')
    .notEmpty().withMessage('‚ö†Ô∏è Campo createdBy obligatorio.'),

  body('sizes')
    .optional()
    .isArray().withMessage('‚ö†Ô∏è El campo sizes debe ser un arreglo.'),

  body('stock')
    .optional()
    .isInt({ min: 0 }).withMessage('‚ö†Ô∏è El stock debe ser un entero ‚â• 0.'),

  body('featured')
    .optional()
    .isBoolean().withMessage('‚ö†Ô∏è featured debe ser booleano.'),

  body('color')
    .optional()
    .isString().withMessage('‚ö†Ô∏è Color inv√°lido.'),

  ...imagenPrincipalRules,
  ...variantesRules
]

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* ‚úèÔ∏è Validaciones para ACTUALIZAR Producto      */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const updateImagenRules = imagenPrincipalRules.map(rule => rule.optional())
const updateVarianteRules = variantesRules.map(rule => rule.optional())

export const updateProductValidation = [
  body('name')
    .optional()
    .isString().withMessage('‚ö†Ô∏è El nombre debe ser texto.').bail()
    .isLength({ min: 2 }).withMessage('‚ö†Ô∏è Nombre demasiado corto.'),

  body('price')
    .optional()
    .isFloat({ gt: 0 }).withMessage('‚ö†Ô∏è El precio debe ser positivo.'),

  body('category')
    .optional()
    .isString().withMessage('‚ö†Ô∏è Categor√≠a inv√°lida.'),

  body('subcategory')
    .optional()
    .isString().withMessage('‚ö†Ô∏è Subcategor√≠a inv√°lida.'),

  body('tallaTipo')
    .optional()
    .isString().withMessage('‚ö†Ô∏è Tipo de talla inv√°lido.'),

  body('color')
    .optional()
    .isString().withMessage('‚ö†Ô∏è Color inv√°lido.'),

  body('sizes')
    .optional()
    .isArray().withMessage('‚ö†Ô∏è Sizes debe ser un arreglo.'),

  body('stock')
    .optional()
    .isInt({ min: 0 }).withMessage('‚ö†Ô∏è El stock debe ser un entero ‚â• 0.'),

  body('featured')
    .optional()
    .isBoolean().withMessage('‚ö†Ô∏è featured debe ser booleano.'),

  ...updateImagenRules,
  ...updateVarianteRules
]
