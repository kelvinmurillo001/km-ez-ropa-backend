// üìÅ routes/promoRoutes.js
import express from 'express';
import { body, param } from 'express-validator';

// üß† Controladores
import {
  getPromotion,
  getAllPromotions,
  updatePromotion,
  togglePromoActive,
  deletePromotion
} from '../controllers/promoController.js';

// üõ°Ô∏è Middlewares
import authMiddleware from '../middleware/authMiddleware.js';
import adminOnly from '../middleware/adminOnly.js';

const router = express.Router();

/* -------------------------------------------------------------------------- */
/* üìÑ RUTAS DE PROMOCIONES                                                    */
/* -------------------------------------------------------------------------- */

/**
 * üîì Obtener promociones activas y vigentes (P√öBLICO)
 * GET /api/promos
 */
router.get('/', getPromotion);

/**
 * üîê Obtener todas las promociones (SOLO ADMIN)
 * GET /api/promos/admin
 */
router.get('/admin', authMiddleware, adminOnly, getAllPromotions);

/**
 * üîê Crear o actualizar una promoci√≥n (SOLO ADMIN)
 * PUT /api/promos
 */
router.put(
  '/',
  authMiddleware,
  adminOnly,
  [
    body('message')
      .trim()
      .notEmpty().withMessage('‚ö†Ô∏è El mensaje de la promoci√≥n es obligatorio')
      .isLength({ min: 3 }).withMessage('‚ö†Ô∏è Debe tener al menos 3 caracteres'),

    body('theme')
      .optional()
      .isIn(['blue', 'orange', 'green', 'red'])
      .withMessage('‚ö†Ô∏è Tema no v√°lido'),

    body('active')
      .optional()
      .isBoolean()
      .withMessage('‚ö†Ô∏è El campo "active" debe ser booleano'),

    body('startDate')
      .optional()
      .isISO8601()
      .withMessage('‚ö†Ô∏è Fecha de inicio inv√°lida'),

    body('endDate')
      .optional()
      .isISO8601()
      .withMessage('‚ö†Ô∏è Fecha de fin inv√°lida'),

    body('mediaUrl')
      .optional()
      .trim()
      .isString()
      .withMessage('‚ö†Ô∏è La mediaUrl debe ser una cadena de texto'),

    body('mediaType')
      .optional()
      .isIn(['image', 'video'])
      .withMessage('‚ö†Ô∏è mediaType debe ser "image" o "video"'),

    body('pages')
      .optional()
      .isArray({ min: 1 })
      .withMessage('‚ö†Ô∏è Debes seleccionar al menos una p√°gina v√°lida'),

    body('pages.*')
      .isIn(['home', 'categorias', 'productos', 'checkout', 'detalle', 'carrito'])
      .withMessage('‚ö†Ô∏è P√°gina no v√°lida para promoci√≥n'),

    body('position')
      .optional()
      .isIn(['top', 'middle', 'bottom'])
      .withMessage('‚ö†Ô∏è Posici√≥n inv√°lida')
  ],
  updatePromotion
);

/**
 * üîÅ Activar o desactivar promoci√≥n (SOLO ADMIN)
 * PATCH /api/promos/:id/estado
 */
router.patch(
  '/:id/estado',
  authMiddleware,
  adminOnly,
  [
    param('id')
      .isMongoId()
      .withMessage('‚ö†Ô∏è ID de promoci√≥n inv√°lido')
  ],
  togglePromoActive
);

/**
 * üóëÔ∏è Eliminar una promoci√≥n (SOLO ADMIN)
 * DELETE /api/promos/:id
 */
router.delete(
  '/:id',
  authMiddleware,
  adminOnly,
  [
    param('id')
      .isMongoId()
      .withMessage('‚ö†Ô∏è ID inv√°lido para eliminar promoci√≥n')
  ],
  deletePromotion
);

// üöÄ Exportar router
export default router;
