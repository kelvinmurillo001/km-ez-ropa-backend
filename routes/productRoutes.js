const express = require('express');
const { body, param } = require('express-validator');
const router = express.Router();

// ‚úÖ Controladores
const {
  getAllProducts,
  getProductById,
  createProduct,
  updateProduct,
  deleteProduct
} = require('../controllers/product');

// üîê Middlewares
const authMiddleware = require('../middleware/authMiddleware');
const adminOnly = require('../middleware/adminOnly');

/* -------------------------------------------------------------------------- */
/* üì¶ RUTAS DE PRODUCTOS                                                      */
/* -------------------------------------------------------------------------- */

/**
 * üì• Obtener todos los productos (P√öBLICO)
 * GET /api/products
 */
router.get('/', getAllProducts);

/**
 * üîç Obtener un producto por ID (P√öBLICO)
 * GET /api/products/:id
 */
router.get(
  '/:id',
  [
    param('id')
      .isMongoId().withMessage('‚ö†Ô∏è ID de producto inv√°lido')
  ],
  getProductById
);

/**
 * ‚ûï Crear producto (SOLO ADMIN)
 * POST /api/products
 */
router.post(
  '/',
  authMiddleware,
  adminOnly,
  [
    body('name')
      .trim().escape()
      .notEmpty().withMessage('‚ö†Ô∏è El nombre del producto es obligatorio')
      .isLength({ min: 2, max: 100 }).withMessage('‚ö†Ô∏è Entre 2 y 100 caracteres'),

    body('price')
      .notEmpty().withMessage('‚ö†Ô∏è El precio es obligatorio')
      .isFloat({ min: 0.01 }).withMessage('‚ö†Ô∏è El precio debe ser mayor a 0'),

    body('category')
      .trim().escape()
      .notEmpty().withMessage('‚ö†Ô∏è La categor√≠a es obligatoria'),

    body('subcategory')
      .trim().escape()
      .notEmpty().withMessage('‚ö†Ô∏è La subcategor√≠a es obligatoria')
      .isLength({ min: 2 }).withMessage('‚ö†Ô∏è M√≠nimo 2 caracteres en la subcategor√≠a'),

    body('tallaTipo')
      .trim()
      .notEmpty().withMessage('‚ö†Ô∏è El tipo de talla es obligatorio')
      .isIn(['adulto', 'ni√±o', 'ni√±a', 'beb√©']).withMessage('‚ö†Ô∏è Tipo de talla inv√°lido'),

    body('images')
      .isArray({ min: 1, max: 1 }).withMessage('‚ö†Ô∏è Se requiere exactamente 1 imagen principal'),

    body('variants')
      .optional()
      .isArray({ max: 4 }).withMessage('‚ö†Ô∏è M√°ximo 4 variantes permitidas'),

    body('sizes')
      .optional()
      .isArray().withMessage('‚ö†Ô∏è sizes debe ser un array')
  ],
  createProduct
);

/**
 * ‚úèÔ∏è Actualizar producto (SOLO ADMIN)
 * PUT /api/products/:id
 */
router.put(
  '/:id',
  authMiddleware,
  adminOnly,
  [
    param('id')
      .isMongoId().withMessage('‚ö†Ô∏è ID de producto inv√°lido'),

    body('name')
      .optional()
      .trim().escape()
      .isLength({ min: 2, max: 100 }).withMessage('‚ö†Ô∏è Nombre inv√°lido'),

    body('price')
      .optional()
      .isFloat({ min: 0 }).withMessage('‚ö†Ô∏è Precio inv√°lido'),

    body('category')
      .optional()
      .trim().escape()
      .isString().withMessage('‚ö†Ô∏è Categor√≠a inv√°lida'),

    body('subcategory')
      .optional()
      .trim().escape()
      .isString().isLength({ min: 2 }).withMessage('‚ö†Ô∏è Subcategor√≠a inv√°lida'),

    body('tallaTipo')
      .optional()
      .trim()
      .isIn(['adulto', 'ni√±o', 'ni√±a', 'beb√©']).withMessage('‚ö†Ô∏è Tipo de talla inv√°lido'),

    body('images')
      .optional()
      .isArray({ max: 1 }).withMessage('‚ö†Ô∏è Solo se permite una imagen principal'),

    body('variants')
      .optional()
      .isArray({ max: 4 }).withMessage('‚ö†Ô∏è M√°ximo 4 variantes permitidas'),

    body('sizes')
      .optional()
      .isArray().withMessage('‚ö†Ô∏è sizes debe ser un array')
  ],
  updateProduct
);

/**
 * üóëÔ∏è Eliminar producto (SOLO ADMIN)
 * DELETE /api/products/:id
 */
router.delete(
  '/:id',
  authMiddleware,
  adminOnly,
  [
    param('id')
      .isMongoId().withMessage('‚ö†Ô∏è ID inv√°lido')
  ],
  deleteProduct
);

module.exports = router;
