const mongoose = require('mongoose');

// 游닍 Esquema de producto con variantes y talla/color para imagen principal
const productSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, '丘멆잺 El nombre del producto es obligatorio'],
      trim: true,
      minlength: [2, '丘멆잺 El nombre debe tener al menos 2 caracteres'],
      maxlength: [100, '丘멆잺 El nombre no debe superar los 100 caracteres']
    },

    price: {
      type: Number,
      required: [true, '丘멆잺 El precio es obligatorio'],
      min: [0, '丘멆잺 El precio no puede ser negativo']
    },

    category: {
      type: String,
      required: [true, '丘멆잺 La categor칤a es obligatoria'],
      trim: true,
      lowercase: true
      // 游댠 enum eliminado para permitir categor칤as din치micas
    },

    subcategory: {
      type: String,
      required: [true, '丘멆잺 La subcategor칤a es obligatoria'],
      trim: true,
      lowercase: true,
      minlength: [2, '丘멆잺 La subcategor칤a debe tener al menos 2 caracteres']
    },

    tallaTipo: {
      type: String,
      required: [true, '丘멆잺 El tipo de talla es obligatorio'],
      enum: ['adulto', 'ni침o', 'ni침a', 'beb칠'],
      lowercase: true,
      trim: true
    },

    stock: {
      type: Number,
      required: [true, '丘멆잺 El stock es obligatorio'],
      min: [0, '丘멆잺 El stock no puede ser negativo']
    },

    featured: {
      type: Boolean,
      default: false
    },

    images: {
      type: [
        {
          url: {
            type: String,
            required: [true, '丘멆잺 La imagen debe tener una URL v치lida'],
            trim: true,
            match: [/^https?:\/\/.+\.(jpg|jpeg|png|webp|gif)$/i, '丘멆잺 URL de imagen inv치lida']
          },
          cloudinaryId: {
            type: String,
            required: [true, '丘멆잺 cloudinaryId obligatorio'],
            trim: true
          },
          talla: {
            type: String,
            required: [true, '丘멆잺 La talla de la imagen principal es obligatoria'],
            trim: true,
            lowercase: true
          },
          color: {
            type: String,
            required: [true, '丘멆잺 El color de la imagen principal es obligatorio'],
            trim: true,
            lowercase: true
          }
        }
      ],
      validate: {
        validator: val => Array.isArray(val) && val.length === 1,
        message: '丘멆잺 Solo se permite exactamente una imagen principal.'
      }
    },

    variants: {
      type: [
        {
          talla: {
            type: String,
            required: [true, '丘멆잺 La talla es obligatoria'],
            trim: true,
            lowercase: true
          },
          color: {
            type: String,
            required: [true, '丘멆잺 El color es obligatorio'],
            trim: true,
            lowercase: true
          },
          imageUrl: {
            type: String,
            required: [true, '丘멆잺 La imagen de la variante es obligatoria'],
            trim: true,
            match: [/^https?:\/\/.+\.(jpg|jpeg|png|webp|gif)$/i, '丘멆잺 URL de imagen de variante inv치lida']
          },
          cloudinaryId: {
            type: String,
            required: [true, '丘멆잺 cloudinaryId de variante obligatorio'],
            trim: true
          },
          stock: {
            type: Number,
            default: 0,
            min: [0, '丘멆잺 El stock no puede ser negativo']
          }
        }
      ],
      validate: {
        validator: val => val.length <= 4,
        message: '丘멆잺 M치ximo 4 variantes por producto.'
      },
      default: []
    },

    createdBy: {
      type: String,
      required: [true, '丘멆잺 Campo createdBy requerido'],
      trim: true
    },

    updatedBy: {
      type: String,
      default: '',
      trim: true
    }
  },
  {
    timestamps: true
  }
);

// 游댌 칈ndices de b칰squeda
productSchema.index({ name: 'text', category: 1, subcategory: 1 });

module.exports = mongoose.model('Product', productSchema);
