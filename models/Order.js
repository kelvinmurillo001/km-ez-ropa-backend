// üìÅ backend/models/Order.js
import mongoose from 'mongoose'

// üì¶ Subesquema de √≠tems del pedido
const orderItemSchema = new mongoose.Schema(
  {
    productId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Product',
      required: [true, '‚ö†Ô∏è ID de producto requerido']
    },
    name: {
      type: String,
      required: [true, '‚ö†Ô∏è Nombre del producto requerido'],
      trim: true,
      minlength: [2, '‚ö†Ô∏è M√≠nimo 2 caracteres']
    },
    talla: {
      type: String,
      trim: true,
      default: '√önica'
    },
    cantidad: {
      type: Number,
      required: true,
      min: [1, '‚ö†Ô∏è Cantidad m√≠nima es 1']
    },
    precio: {
      type: Number,
      required: true,
      min: [0, '‚ö†Ô∏è El precio no puede ser negativo']
    }
  },
  { _id: false }
)

// üßæ Esquema principal del Pedido
const orderSchema = new mongoose.Schema(
  {
    items: {
      type: [orderItemSchema],
      validate: {
        validator: (arr) => Array.isArray(arr) && arr.length > 0,
        message: '‚ö†Ô∏è El pedido debe contener al menos un producto'
      }
    },
    total: {
      type: Number,
      required: true,
      min: [0, '‚ö†Ô∏è El total no puede ser negativo']
    },
    nombreCliente: {
      type: String,
      required: [true, '‚ö†Ô∏è Nombre del cliente requerido'],
      trim: true,
      minlength: [2, '‚ö†Ô∏è M√≠nimo 2 caracteres'],
      maxlength: [100, '‚ö†Ô∏è M√°ximo 100 caracteres']
    },
    email: {
      type: String,
      required: [true, '‚ö†Ô∏è Correo electr√≥nico requerido'],
      trim: true,
      lowercase: true,
      match: [/^[^\s@]+@[^\s@]+\.[^\s@]+$/, '‚ö†Ô∏è Email inv√°lido']
    },
    telefono: {
      type: String,
      required: [true, '‚ö†Ô∏è Tel√©fono requerido'],
      trim: true,
      minlength: [7, '‚ö†Ô∏è Tel√©fono demasiado corto'],
      maxlength: [20, '‚ö†Ô∏è Tel√©fono demasiado largo']
    },
    nota: {
      type: String,
      trim: true,
      maxlength: [300, '‚ö†Ô∏è Nota demasiado larga'],
      default: ''
    },
    estado: {
      type: String,
      enum: ['pendiente', 'en_proceso', 'enviado', 'cancelado'],
      default: 'pendiente'
    }

    // üöÄ Futuro:
    // direccionEnvio: { type: String, trim: true },
    // metodoPago: { type: String, enum: ['efectivo', 'tarjeta'], default: 'efectivo' },
    // seguimiento: { type: String, trim: true }
  },
  {
    timestamps: true // üïí createdAt y updatedAt autom√°ticos
  }
)

// üîç √çndices √∫tiles para optimizar b√∫squedas por estado y fecha
orderSchema.index({ estado: 1, createdAt: -1 })

// üöÄ Exportar el modelo
const Order = mongoose.model('Order', orderSchema)
export default Order
