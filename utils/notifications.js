import { sendNotification } from '../utils/notifications.js'

describe('üß™ Notificaciones - Simulaci√≥n de env√≠o', () => {
  const consoleLog = jest.spyOn(console, 'log').mockImplementation(() => {})
  const consoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {})
  const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {})

  afterEach(() => {
    jest.clearAllMocks()
  })

  test('‚úÖ Enviar notificaci√≥n con todos los datos', async () => {
    await sendNotification({
      nombreCliente: 'Kelvin',
      telefono: '0999999999',
      email: 'kelvin@test.com',
      estadoActual: 'preparando'
    })

    expect(consoleLog).toHaveBeenCalledWith(
      'üì≤ WhatsApp a 0999999999: üõ†Ô∏è Hola Kelvin, estamos preparando tu pedido.'
    )
    expect(consoleLog).toHaveBeenCalledWith(
      'üìß Email a kelvin@test.com: [Actualizaci√≥n de tu Pedido] üõ†Ô∏è Hola Kelvin, estamos preparando tu pedido.'
    )
    expect(consoleLog).toHaveBeenCalledWith('‚úÖ Notificaciones enviadas correctamente.')
  })

  test('‚ö†Ô∏è Mostrar advertencia si falta tel√©fono o email', async () => {
    await sendNotification({
      nombreCliente: 'Ana',
      telefono: '',
      email: '',
      estadoActual: 'en camino'
    })

    expect(consoleWarn).toHaveBeenCalledWith('‚ö†Ô∏è No hay n√∫mero de tel√©fono para enviar WhatsApp.')
    expect(consoleWarn).toHaveBeenCalledWith('‚ö†Ô∏è No hay correo para enviar Email.')
  })

  test('üì¶ Mensaje gen√©rico si el estado no es reconocido', async () => {
    await sendNotification({
      nombreCliente: 'Luis',
      telefono: '0999999999',
      email: 'luis@test.com',
      estadoActual: 'pendiente'
    })

    expect(consoleLog).toHaveBeenCalledWith(
      'üì≤ WhatsApp a 0999999999: üì¶ Hola Luis, actualizaci√≥n de tu pedido.'
    )
  })

  test('‚ùå Manejar errores sin crashear', async () => {
    const errorMock = jest.fn(() => {
      throw new Error('Fallo simulado')
    })

    // Sobrescribir temporalmente enviarWhatsapp o enviarEmail
    const { __RewireAPI__ } = await import('../utils/notifications.js')
    __RewireAPI__.__Rewire__('enviarWhatsapp', errorMock)

    await sendNotification({
      nombreCliente: 'Laura',
      telefono: '1234567890',
      email: 'laura@test.com',
      estadoActual: 'recibido'
    })

    expect(consoleError).toHaveBeenCalledWith(
      '‚ùå Error enviando notificaciones:',
      'Fallo simulado'
    )

    __RewireAPI__.__ResetDependency__('enviarWhatsapp')
  })
})
