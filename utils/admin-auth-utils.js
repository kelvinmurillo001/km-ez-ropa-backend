/**
 * ‚úÖ Verifica si el usuario tiene rol de administrador
 * @param {Object} usuario - Objeto de usuario desde el token o sesi√≥n
 * @returns {boolean}
 */
export function esAdmin(usuario) {
  return usuario?.role?.toLowerCase?.() === 'admin' || usuario?.isAdmin === true
}

/**
 * ‚ùå Devuelve una respuesta de error con formato uniforme
 * @param {Object} res - Objeto de respuesta de Express
 * @param {string} mensaje - Mensaje de error
 * @param {number} status - C√≥digo de estado HTTP (por defecto 500)
 */
export function enviarError(res, mensaje = '‚ùå Error del servidor', status = 500) {
  if (!res || typeof res.status !== 'function') {
    console.warn('‚ö†Ô∏è Se intent√≥ enviar error pero el objeto res no es v√°lido')
    return
  }

  return res.status(status).json({
    ok: false,
    message: mensaje
  })
}

/**
 * ‚úÖ Devuelve una respuesta de √©xito con formato uniforme
 * @param {Object} res - Objeto de respuesta de Express
 * @param {any} data - Datos a retornar al cliente
 * @param {string} mensaje - Mensaje opcional de √©xito
 */
export function enviarExito(res, data = {}, mensaje = '‚úÖ Operaci√≥n exitosa') {
  if (!res || typeof res.status !== 'function') {
    console.warn('‚ö†Ô∏è Se intent√≥ enviar √©xito pero el objeto res no es v√°lido')
    return
  }

  return res.status(200).json({
    ok: true,
    message: mensaje,
    data
  })
}

/**
 * üïµÔ∏è‚Äç‚ôÇÔ∏è Extrae el token del encabezado Authorization
 * @param {Object} req - Objeto de petici√≥n de Express
 * @returns {string|null} - Token extra√≠do o null si no existe
 */
export function obtenerTokenDesdeHeader(req) {
  const authHeader = req?.headers?.authorization
  if (!authHeader || typeof authHeader !== 'string') return null

  const [bearer, token] = authHeader.split(' ')
  if (bearer?.toLowerCase() !== 'bearer' || !token || token.length < 10) return null

  return token.trim()
}
