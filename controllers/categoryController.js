const Category = require('../models/category');

/**
 * üì• Obtener todas las categor√≠as
 */
const getAllCategories = async (req, res) => {
  try {
    const categories = await Category.find().sort({ name: 1 });
    return res.status(200).json(categories);
  } catch (error) {
    console.error('‚ùå Error al obtener categor√≠as:', error);
    return res.status(500).json({ message: '‚ùå Error al obtener las categor√≠as' });
  }
};

/**
 * ‚ûï Crear nueva categor√≠a (con o sin subcategor√≠a)
 */
const createCategory = async (req, res) => {
  try {
    const name = req.body.name?.trim();
    const subcategory = req.body.subcategory?.trim();

    if (!name || name.length < 2) {
      return res.status(400).json({
        message: '‚ö†Ô∏è El nombre de la categor√≠a es obligatorio y debe tener al menos 2 caracteres'
      });
    }

    const exists = await Category.findOne({
      name: new RegExp(`^${name}$`, 'i')
    });

    if (exists) {
      return res.status(400).json({ message: '‚ö†Ô∏è La categor√≠a ya existe' });
    }

    const nuevaCategoria = new Category({
      name: name.toLowerCase(),
      subcategories: subcategory ? [subcategory] : []
    });

    await nuevaCategoria.save();
    return res.status(201).json(nuevaCategoria);

  } catch (error) {
    console.error('‚ùå Error creando categor√≠a:', error);
    return res.status(500).json({ message: '‚ùå Error al crear la categor√≠a' });
  }
};

/**
 * ‚ûï Agregar subcategor√≠a a categor√≠a existente
 */
const addSubcategory = async (req, res) => {
  try {
    const { categoryId } = req.params;
    const subcategory = req.body.subcategory?.trim();

    if (!subcategory || subcategory.length < 2) {
      return res.status(400).json({
        message: '‚ö†Ô∏è La subcategor√≠a es obligatoria y debe tener al menos 2 caracteres'
      });
    }

    const category = await Category.findById(categoryId);
    if (!category) {
      return res.status(404).json({ message: '‚ùå Categor√≠a no encontrada' });
    }

    const alreadyExists = category.subcategories.some(
      sc => sc.toLowerCase() === subcategory.toLowerCase()
    );

    if (alreadyExists) {
      return res.status(400).json({ message: '‚ö†Ô∏è La subcategor√≠a ya existe en esta categor√≠a' });
    }

    category.subcategories.push(subcategory);
    await category.save();

    return res.status(200).json({
      message: '‚úÖ Subcategor√≠a agregada correctamente',
      category
    });

  } catch (error) {
    console.error('‚ùå Error agregando subcategor√≠a:', error);
    return res.status(500).json({ message: '‚ùå Error al agregar la subcategor√≠a' });
  }
};

/**
 * üóëÔ∏è Eliminar categor√≠a completa por ID
 */
const deleteCategory = async (req, res) => {
  try {
    const { id } = req.params;

    const category = await Category.findById(id);
    if (!category) {
      return res.status(404).json({ message: '‚ùå Categor√≠a no encontrada' });
    }

    await category.deleteOne();
    return res.status(200).json({ message: '‚úÖ Categor√≠a eliminada correctamente' });

  } catch (error) {
    console.error('‚ùå Error eliminando categor√≠a:', error);
    return res.status(500).json({ message: '‚ùå Error al eliminar la categor√≠a' });
  }
};

/**
 * üóëÔ∏è Eliminar subcategor√≠a espec√≠fica de una categor√≠a
 */
const deleteSubcategory = async (req, res) => {
  try {
    const { categoryId, subcategory } = req.params;

    const category = await Category.findById(categoryId);
    if (!category) {
      return res.status(404).json({ message: '‚ùå Categor√≠a no encontrada' });
    }

    const index = category.subcategories.findIndex(
      sc => sc.toLowerCase() === subcategory.toLowerCase()
    );

    if (index === -1) {
      return res.status(404).json({ message: '‚ùå Subcategor√≠a no encontrada' });
    }

    category.subcategories.splice(index, 1);
    await category.save();

    return res.status(200).json({
      message: '‚úÖ Subcategor√≠a eliminada correctamente',
      category
    });

  } catch (error) {
    console.error('‚ùå Error eliminando subcategor√≠a:', error);
    return res.status(500).json({ message: '‚ùå Error al eliminar la subcategor√≠a' });
  }
};

module.exports = {
  getAllCategories,
  createCategory,
  addSubcategory,
  deleteCategory,
  deleteSubcategory
};
