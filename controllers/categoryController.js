// üìÅ backend/controllers/categoryController.js
import mongoose from 'mongoose';
import Category from '../models/category.js';
import logger from '../utils/logger.js';

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üì• GET /api/categories ‚Äî P√∫blico              */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export const getAllCategories = async (_req, res) => {
  try {
    const categories = await Category.find().select('-__v').sort({ name: 1 }).lean();
    return res.status(200).json({ ok: true, data: categories });
  } catch (err) {
    logger.error('‚ùå Error al obtener categor√≠as:', err);
    return res.status(500).json({
      ok: false,
      message: '‚ùå Error interno al obtener categor√≠as.',
      ...(process.env.NODE_ENV !== 'production' && { error: err.message }),
    });
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* ‚ûï POST /api/categories ‚Äî Admin                */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export const createCategory = async (req, res) => {
  try {
    const nameRaw = String(req.body.name || '').trim().toLowerCase();
    const subRaw = String(req.body.subcategory || '').trim().toLowerCase();

    const isValid = /^[a-z√°√©√≠√≥√∫√º√±0-9\s]{2,50}$/i.test(nameRaw);
    if (!isValid) {
      return res.status(400).json({
        ok: false,
        message: '‚ö†Ô∏è El nombre debe tener entre 2 y 50 caracteres v√°lidos (sin s√≠mbolos especiales).',
      });
    }

    const exists = await Category.findOne({ name: nameRaw }).lean();
    if (exists) {
      return res.status(409).json({ ok: false, message: '‚ö†Ô∏è La categor√≠a ya existe.' });
    }

    const newCategory = await Category.create({
      name: nameRaw,
      subcategories: subRaw ? [subRaw] : [],
    });

    return res.status(201).json({ ok: true, data: newCategory });
  } catch (err) {
    logger.error('‚ùå Error creando categor√≠a:', err);
    return res.status(500).json({
      ok: false,
      message: '‚ùå Error interno al crear categor√≠a.',
      ...(process.env.NODE_ENV !== 'production' && { error: err.message }),
    });
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* ‚ûï POST /api/categories/:id/subcategories ‚Äî Admin */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export const addSubcategory = async (req, res) => {
  try {
    const { categoryId } = req.params;
    const subRaw = String(req.body.subcategory || '').trim().toLowerCase();

    if (!mongoose.Types.ObjectId.isValid(categoryId)) {
      return res.status(400).json({ ok: false, message: '‚ö†Ô∏è ID de categor√≠a inv√°lido.' });
    }

    const isValid = /^[a-z√°√©√≠√≥√∫√º√±0-9\s]{2,50}$/i.test(subRaw);
    if (!isValid) {
      return res.status(400).json({
        ok: false,
        message: '‚ö†Ô∏è Subcategor√≠a inv√°lida. Debe tener entre 2 y 50 caracteres.',
      });
    }

    const category = await Category.findById(categoryId);
    if (!category) {
      return res.status(404).json({ ok: false, message: '‚ùå Categor√≠a no encontrada.' });
    }

    if (category.subcategories.includes(subRaw)) {
      return res.status(409).json({ ok: false, message: '‚ö†Ô∏è Subcategor√≠a ya existe.' });
    }

    category.subcategories.push(subRaw);
    await category.save();

    return res.status(200).json({ ok: true, data: category });
  } catch (err) {
    logger.error('‚ùå Error agregando subcategor√≠a:', err);
    return res.status(500).json({
      ok: false,
      message: '‚ùå Error interno al agregar subcategor√≠a.',
      ...(process.env.NODE_ENV !== 'production' && { error: err.message }),
    });
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üóëÔ∏è DELETE /api/categories/:id ‚Äî Admin         */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export const deleteCategory = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ ok: false, message: '‚ö†Ô∏è ID inv√°lido.' });
    }

    const category = await Category.findById(id);
    if (!category) {
      return res.status(404).json({ ok: false, message: '‚ùå Categor√≠a no encontrada.' });
    }

    await category.deleteOne();
    return res.status(200).json({ ok: true, message: '‚úÖ Categor√≠a eliminada correctamente.' });
  } catch (err) {
    logger.error('‚ùå Error eliminando categor√≠a:', err);
    return res.status(500).json({
      ok: false,
      message: '‚ùå Error interno al eliminar categor√≠a.',
      ...(process.env.NODE_ENV !== 'production' && { error: err.message }),
    });
  }
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
/* üóëÔ∏è DELETE /api/categories/:id/subcategories/:subcategory */
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export const deleteSubcategory = async (req, res) => {
  try {
    const { categoryId, subcategory } = req.params;
    const subRaw = String(subcategory || '').trim().toLowerCase();

    if (!mongoose.Types.ObjectId.isValid(categoryId)) {
      return res.status(400).json({ ok: false, message: '‚ö†Ô∏è ID de categor√≠a inv√°lido.' });
    }

    const category = await Category.findById(categoryId);
    if (!category) {
      return res.status(404).json({ ok: false, message: '‚ùå Categor√≠a no encontrada.' });
    }

    const index = category.subcategories.indexOf(subRaw);
    if (index === -1) {
      return res.status(404).json({ ok: false, message: '‚ùå Subcategor√≠a no encontrada.' });
    }

    category.subcategories.splice(index, 1);
    await category.save();

    return res.status(200).json({ ok: true, data: category });
  } catch (err) {
    logger.error('‚ùå Error eliminando subcategor√≠a:', err);
    return res.status(500).json({
      ok: false,
      message: '‚ùå Error interno al eliminar subcategor√≠a.',
      ...(process.env.NODE_ENV !== 'production' && { error: err.message }),
    });
  }
};
